from flask import Flask, render_template, redirect, url_for, flash, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user, login_manager
from flask_migrate import Migrate
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import InputRequired, Length, ValidationError, Email, EqualTo
from flask_wtf.csrf import CSRFProtect
from datetime import datetime, time # Import the datetime class
from flask_wtf.csrf import CSRFProtect



app = Flask(__name__)
login_manager = LoginManager(app)
login_manager.login_view = "login"

# Configure the database URI and secret key
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///database.db"
app.config["SECRET_KEY"] = "thisisasecretkey"

# Create the SQLAlchemy instance
db = SQLAlchemy(app)
migrate = Migrate(app, db)

csrf = CSRFProtect(app)
# csrf = CSRFProtect(app)


# Create the Task model for representing tasks in the database
class Task(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    task = db.Column(db.String(50), nullable=False)
    description = db.Column(db.String(255), nullable=False)
    due_date = db.Column(db.Date, nullable=False)
    due_time = db.Column(db.Time)
    completed = db.Column(db.Boolean, default=False)
    category = db.Column(db.String(10))  # 'low', 'medium', or 'high'

    def __init__(self, task, description, due_date, due_time, completed, category):
        self.task = task
        self.description = description
        self.due_date = due_date
        self.due_time = due_time
        self.completed = completed
        self.category = category

    def __repr__(self):
        return f"{self.task}:{self.due_date}"

    

# Create the TaskForm class for handling task input
class TaskForm(FlaskForm):
    task = StringField("Task", validators=[InputRequired(), Length(max=50)])
    description = StringField("Description", validators=[InputRequired(), Length(max=255)])
    due_date = StringField("Due Date", validators=[InputRequired()])
    due_time = StringField("Due Time")
    category = StringField("Priority", validators=[InputRequired(), Length(max=10)])



# Create the User model
class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    fullname = db.Column(db.String(50), nullable=False)
    email = db.Column(db.String(120), nullable=False, unique=True)
    username = db.Column(db.String(20), nullable=False, unique=True)
    password = db.Column(db.String(80), nullable=False)


@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Create all database tables within the application context
with app.app_context():
    db.create_all()

class RegisterForm(FlaskForm):
    fullname = StringField(validators=[
        InputRequired(), Length(min=4, max=50)], render_kw={"placeholder": "Your Name"})

    email = StringField(validators=[
        InputRequired(), Email()], render_kw={"placeholder": "Your Email"})

    username = StringField(validators=[
        InputRequired(), Length(min=4, max=20)], render_kw={"placeholder": "Username"})

    password = PasswordField(validators=[
        InputRequired(), Length(min=8, max=20)], render_kw={"placeholder": "Password"})

    confirm_password = PasswordField(validators=[
        InputRequired(), EqualTo('password')], render_kw={"placeholder": "Repeat your password"})

    submit = SubmitField('Register')

    def validate_username(self, username):
        existing_user_username = User.query.filter_by(
            username=username.data).first()
        if existing_user_username:
            raise ValidationError(
                'That username already exists. Please choose a different one.')

    def validate_email(self, email):
        existing_user_email = User.query.filter_by(email=email.data).first()
        if existing_user_email:
            raise ValidationError(
                'That email is already registered. Please use a different one.')



class LoginForm(FlaskForm):
    
    username = StringField(validators=[
                           InputRequired(), Length(min=4, max=20)], render_kw={"placeholder": "Username"})

    password = PasswordField(validators=[
                             InputRequired(), Length(min=8, max=20)], render_kw={"placeholder": "Password"})

    submit = SubmitField('Login')


# Define your routes
@app.route("/")
def index():
    return render_template("home.html")

@app.route("/register", methods=["POST","GET"])
def register():
    form = RegisterForm()

    if form.validate_on_submit():
        new_user = User(
            fullname=form.fullname.data,
            email=form.email.data,
            username=form.username.data,
            password=form.password.data
        )
        db.session.add(new_user)
        db.session.commit()

        flash('Registration successful! You can now log in.', 'success')
        return redirect(url_for('login'))

    return render_template("register.html", form=form)

@app.route("/login", methods=["POST","GET"])
def login():
    form = LoginForm()

    if form.validate_on_submit():
        # Check if the provided username and password match a user in the database
        user = User.query.filter_by(username=form.username.data).first()
        if user and user.password == form.password.data:
            login_user(user, remember=True)  # Optional: This line sets the "remember me" cookie.
            flash('Login successful!', 'success')
            return redirect(url_for('dashboard'))
        else:
            flash('Invalid username or password', 'danger')

    return render_template("login.html", form=form)


# ...

# ...

@app.route("/dashboard", methods=["GET", "POST"])
@login_required
def dashboard():
    form = TaskForm(request.form)

    if request.method == "POST" and form.validate():
        description = form.description.data
        due_date = form.due_date.data
        due_time = form.due_time.data

        if description:
            new_task = Task(
                user_id=current_user.id,
                description=description,
                due_date=due_date,
                due_time=due_time
            )
            db.session.add(new_task)
            db.session.commit()

    tasks = Task.query.filter_by(user_id=current_user.id).all()

    for task in tasks:
        task.formatted_due_date = task.due_date.strftime('%d %b %Y')

    # Initialize task_for_modal with default values
    task_for_modal = Task(
        task="",
        description="",
        due_date=None,
        due_time=None,
        completed=False,
        category=""
    )

    return render_template("dashboard.html", tasks=tasks, form=form, current_user=current_user, task_for_modal=task_for_modal)

# ...






@app.route("/tasks")
@login_required
def tasks():
    return render_template("dashboard.html")

@app.route("/logout")
@login_required
def logout():
    logout_user()
    flash("You have been logged out.", "info")
    return redirect(url_for("index"))

from datetime import datetime, time

# ...

@app.route("/add_task", methods=["POST"])
@login_required
def add_task():
    # Retrieve form data from the request
    task = request.form.get("task")
    description = request.form.get("description")
    due_date_str = request.form.get("due_date")
    due_time_str = request.form.get("due_time")
    category = request.form.get("category")

    due_date = datetime.strptime(due_date_str, '%Y-%m-%d').date()
    due_time = datetime.strptime(due_time_str, '%H:%M').time()

    new_task = Task(
        task=task,
        description=description,
        due_date=due_date,
        due_time=due_time,
        completed=False,
        category=category
    )
    new_task.user_id = current_user.id
    db.session.add(new_task)
    db.session.commit()

    flash('Task added successfully!', 'success')
    return redirect(url_for("dashboard"))

# ... (your existing imports) ...

@app.route("/edit_task/<int:task_id>", methods=['GET', 'POST'])
@login_required
def edit_task(task_id):
    task = Task.query.get_or_404(task_id)

    form = TaskForm()
    if form.validate_on_submit():
        task.task = form.task.data
        task.description = form.description.data
        task.due_date = form.due_date.data
        task.due_time = form.due_time.data
        task.category = form.category.data

        # Convert due_date and due_time to Python date and time objects
        task.due_date = datetime.strptime(form.due_date.data, '%Y-%m-%d').date()
        task.due_time = datetime.strptime(form.due_time.data, '%H:%M').time()

        db.session.commit()

        flash('Task has been updated successfully!', 'success')
        return redirect(url_for('dashboard'))

    # Pre-fill the form fields with the existing task data
    form.task.data = task.task
    form.description.data = task.description
    form.due_date.data = task.due_date
    form.due_time.data = task.due_time
    form.category.data = task.category

    # return render_template('dashboard.html', form=form, tasks=get_user_tasks(), current_user=current_user)
    return render_template('dashboard.html', task=task, form=form, current_user=current_user)


# route for handling deleting tasks 
@app.route("/delete_task/<int:task_id>", methods=['GET', 'POST'])
@login_required
def delete_task(task_id):
    task = Task.query.get_or_404(task_id)
    db.session.delete(task)
    db.session.commit()
    flash('Task has been deleted successfully!', 'success')
    return redirect(url_for('dashboard'))

@app.route("/toggle_task_completion/<int:task_id>", methods=['POST'])
@login_required
def toggle_task_completion(task_id):
    task = Task.query.get_or_404(task_id)
    task.completed = not task.completed  # Toggle the completion state
    db.session.commit()
    return redirect(url_for('dashboard'))


   

if __name__ == "__main__":
    app.run(debug=True)
